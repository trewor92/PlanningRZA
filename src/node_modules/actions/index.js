import {getTreeData as getTreeDataApi } from 'api'
import {getTableData as getTableDataApi } from 'api'
import * as R from 'ramda'

import {
  FETCH_ELEMENTS_TO_TREE_START,
  FETCH_ELEMENTS_TO_TREE_SUCCESS,
  FETCH_ELEMENTS_TO_TREE_FAILURE,
  CHANGE_FOLDER_CONDITION_IN_TREE,
  FETCH_DATA_TO_TABLE_START,
  FETCH_DATA_TO_TABLE_SUCCESS,
  FETCH_DATA_TO_TABLE_FAILURE
} from 'actionTypes'

export const fetchChildTreeData = (node) => async dispatch => {
  dispatch({
    type: FETCH_ELEMENTS_TO_TREE_START})
  try{
    const path = R.concat(node.childMethod, node.id)
    const treeData = await getTreeDataApi(path)
    dispatch({
      type: FETCH_ELEMENTS_TO_TREE_SUCCESS,
      payload: {id: node.id, childs: treeData}
    })
  }
  catch (err){
    dispatch({
      type: FETCH_ELEMENTS_TO_TREE_FAILURE,
      payload: err,
      error:true
    })
  }
}

export const changeFolderCondition = (node) => dispatch => {
    dispatch({
      type:CHANGE_FOLDER_CONDITION_IN_TREE,
      payload:node.id
    })
}

export const fetchDataToTable = (node) => async dispatch => {
  dispatch({
    type: FETCH_DATA_TO_TABLE_START})
  try{
    const path = node.id
    const data = await getTableDataApi(path)
    dispatch({
      type: FETCH_DATA_TO_TABLE_SUCCESS,
      payload: data
    })
  }
  catch (err){
    dispatch({
      type: FETCH_DATA_TO_TABLE_FAILURE,
      payload: err,
      error:true
    })
  }
}
